  CREATE TABLE "JUMBO"."OIISAPIERRORS" 
   (	"MOMENT" DATE, 
	"OBJECTTYPE" VARCHAR2(100 BYTE), 
	"OBJECTNAME" VARCHAR2(100 BYTE), 
	"LINE" NUMBER(9,0), 
	"ERRORCODE" NUMBER(9,0), 
	"MSG" CLOB, 
	"VALUES" CLOB, 
	"MAILTARGETS" VARCHAR2(4000 BYTE)
   )
   /
   CREATE TABLE "JUMBO"."OIISAPIVALUES" 
   (	"VALUENAME" VARCHAR2(4000 BYTE), 
	"VALUE" VARCHAR2(4000 BYTE)
   )
create or replace PACKAGE pkg_oiis_api AS
    TYPE keys_values IS
        TABLE OF VARCHAR2(1000) INDEX BY VARCHAR2(4000);
    base_url CONSTANT VARCHAR2(1000) DEFAULT 'http://192.168.2.150:3005/api';
    PROCEDURE api_error_insert (
        p_objecttype VARCHAR2 DEFAULT NULL,
        p_objectname VARCHAR2 DEFAULT NULL,
        p_line       INTEGER DEFAULT NULL,
        p_errorcode  INTEGER DEFAULT NULL,
        p_msg        VARCHAR2 DEFAULT NULL,
        p_vlrs       VARCHAR2 DEFAULT NULL,
        p_mailtarget VARCHAR2 DEFAULT NULL
    );

    FUNCTION apirequest (
        p_method     VARCHAR2 DEFAULT 'POST',
        p_url        VARCHAR2,
        p_headers    keys_values,
        p_parameters VARCHAR2 DEFAULT NULL
    ) RETURN CLOB;

    FUNCTION getapitoken(newToken integer default 0) RETURN VARCHAR2;

    FUNCTION create_pix_of_trans (
        p_codcli number,
        p_value number,
        p_numtrans number,
        p_numnf number,
        p_prest number,
        v_message in out varchar2
    ) RETURN VARCHAR2;

    FUNCTION delete_pix(
        p_txid varchar2,
        v_message in out varchar2
    ) RETURN VARCHAR2;

END pkg_oiis_api;
/
create or replace PACKAGE BODY pkg_oiis_api AS

    default_user_email    CONSTANT VARCHAR2(1000) DEFAULT 'system@system';
    default_user_password CONSTANT VARCHAR2(1000) DEFAULT 'system';

    PROCEDURE api_error_insert (
        p_objecttype VARCHAR2 DEFAULT NULL,
        p_objectname VARCHAR2 DEFAULT NULL,
        p_line       INTEGER DEFAULT NULL,
        p_errorcode  INTEGER DEFAULT NULL,
        p_msg        VARCHAR2 DEFAULT NULL,
        p_vlrs       VARCHAR2 DEFAULT NULL,
        p_mailtarget VARCHAR2 DEFAULT NULL
    ) AS
        PRAGMA autonomous_transaction;
        v_ler jumbo.OIISAPIERRORS%rowtype default NULL;
    BEGIN
        v_ler.moment := sysdate;
        v_ler.objecttype := p_objecttype;
        v_ler.objectname := nvl(p_objectname, $$plsql_unit);
        v_ler.line := nvl(p_line, $$plsql_line);
        v_ler.errorcode := nvl(p_errorcode, sqlcode);
        v_ler.msg := nvl(p_msg, sqlerrm);
        v_ler."VALUES" := p_vlrs;
        v_ler.mailtargets := p_mailtarget;
        INSERT INTO jumbo.OIISAPIERRORS VALUES v_ler;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
        /*se esta procedure falhar, somente lhe resta mostrar o erro ocorrido*/
            dbms_output.put_line(concat('MOSTRANDO ERRO NA FUNCAO API_ERROR_INSERT POR OCORRENCIA DE ERRO: ', substr(concat(concat(sqlerrm, ' '), concat(dbms_utility.format_error_backtrace, concat(concat(' ', p_msg), p_vlrs))), 1, 4000)));

            NULL;
    END api_error_insert;

    FUNCTION apirequest (
        p_method     VARCHAR2 DEFAULT 'POST',
        p_url        VARCHAR2,
        p_headers    keys_values,
        p_parameters VARCHAR2 DEFAULT NULL
    ) RETURN CLOB AS

        req      utl_http.req;
        res      utl_http.resp;
        result   CLOB DEFAULT '';
        l_idx    VARCHAR2(1000);
        v_buffer VARCHAR2(32767);
    BEGIN
        dbms_output.put_line('requesting to ' || p_url);
        req := utl_http.begin_request(p_url, p_method, utl_http.http_version_1_1);
        IF p_headers IS NOT NULL THEN
            l_idx := p_headers.first;
            WHILE ( l_idx IS NOT NULL ) LOOP
                utl_http.set_header(req, l_idx, p_headers(l_idx));
                dbms_output.put_line('setted header '
                                     || l_idx
                                     || ':'
                                     || p_headers(l_idx));

                l_idx := p_headers.next(l_idx);
            END LOOP;

            utl_http.set_header(req, 'Content-length', length(p_parameters));
        END IF;

        utl_http.set_transfer_timeout(3600);
        utl_http.set_follow_redirect(1000);
        dbms_output.put_line('writing parameters: ' || p_parameters);
        utl_http.write_text(req, p_parameters);
        dbms_output.put_line('getting response...');
        res := utl_http.get_response(req);
        dbms_output.put_line('getted response with status code: ' || res.status_code);
        result := '';
        BEGIN
            LOOP
                utl_http.read_line(res, v_buffer);
                result := result || v_buffer;
            END LOOP;

            utl_http.end_response(res);
        EXCEPTION
            WHEN utl_http.end_of_body THEN
                utl_http.end_response(res);
                NULL;
            WHEN OTHERS THEN
                utl_http.end_response(res);
                api_error_insert(p_objectname => $$plsql_unit, p_vlrs => p_url || p_parameters, p_line => $$plsql_line);

        END;

        RETURN result;
    EXCEPTION
        WHEN OTHERS THEN
            utl_http.end_response(res);
            api_error_insert(p_line => $$plsql_line, p_vlrs => p_url
                                                               || p_parameters
                                                               || ' status: '
                                                               || res.status_code);

            RETURN NULL;
    END apirequest;

    FUNCTION getapitoken(newToken integer default 0) RETURN VARCHAR2 AS
        PRAGMA autonomous_transaction;
        r         CLOB;
        v_headers jumbo.pkg_oiis_api.keys_values;
        jo        json_object_t;
        v_result  VARCHAR2(1000) DEFAULT NULL;
        v_exists integer default 0;
    BEGIN
        if newToken = 0 then
            select count(1) into v_exists from jumbo.OIISAPIVALUES where valuename = 'token';
            if v_exists > 0 then
                select "VALUE" into v_result from jumbo.OIISAPIVALUES where valuename = 'token';
            end if;
        end if;
        if newToken = 1 or v_result is null then
            v_headers('Accept') := 'application/json';
            v_headers('Content-Type') := 'application/json';
            r := jumbo.pkg_oiis_api.apirequest(
                p_method => 'POST', 
                p_url => base_url || '/auth/login', 
                p_headers => v_headers, 
                p_parameters => '{"email":"'|| default_user_email || '","password":"' || default_user_password || '"}' 
            );
            dbms_output.put_line('response: ' || r);
            jo := json_object_t.parse(r);
            v_result := jo.get_object('data').get_string('token');
            if v_result != null and length(v_result) > 0 then
                insert into jumbo.OIISAPIVALUES values ('token',v_result);
                commit;
            end if;
        end if;
        RETURN v_result;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN v_result;
    END;

    FUNCTION create_pix_of_trans (
        p_codcli number,
        p_value number,
        p_numtrans number,
        p_numnf number,
        p_prest number,
        v_message in out varchar2
    ) RETURN VARCHAR2 AS
        PRAGMA autonomous_transaction;
        r         CLOB;
        v_headers jumbo.pkg_oiis_api.keys_values;
        jo        json_object_t;
        v_parameters VARCHAR2(32767) DEFAULT NULL;
        v_result VARCHAR2(32767) DEFAULT NULL;
        v_ler OIISAPIERRORS%rowtype default NULL;
        
    BEGIN
        if 
            nvl(p_codcli,0) > 0 
            and nvl(p_value,0) > 0 
            and nvl(p_numtrans,0) > 0 
            and nvl(p_numnf,0) > 0 
        then            
            v_headers('Accept') := 'application/json';
            v_headers('Content-Type') := 'application/json';
            v_headers('x-access-token') := getApiToken();
            v_parameters := '{"codcli":'|| p_codcli || ',"value":' || REPLACE(TO_CHAR(p_value),',','.') || ',"numtrans":' || p_numtrans ||',"numnf":' || p_numnf || ',"prest": '|| p_prest ||'}' ;
            r := jumbo.pkg_oiis_api.apirequest(
                p_method => 'POST', 
                p_url => base_url || '/modules/outputs/sales/financial_collection/pix/integrations/sicredi/create', 
                p_headers => v_headers,                
                p_parameters => v_parameters
            );
            jo := json_object_t.parse(r);
            if jo.get_string('success') = 'true' then
                v_result := jo.get_object('data').to_string();
            else
                v_message := jo.get_string('message');
                api_error_insert(
                    p_objecttype => 'package',
                    p_objectname => $$plsql_unit,
                    p_line => $$plsql_line,
                    p_msg => v_message,
                    p_vlrs => v_parameters || r
                );
            end if;
        end if;
        RETURN v_result;
    EXCEPTION
        WHEN OTHERS THEN
            api_error_insert(p_line => $$plsql_line);
            v_message := sqlerrm;
            RETURN v_result;
    END;
    
    FUNCTION delete_pix(
        p_txid varchar2,
        v_message in out varchar2
    ) RETURN VARCHAR2 AS
        PRAGMA autonomous_transaction;
        r         CLOB;
        v_headers jumbo.pkg_oiis_api.keys_values;
        jo        json_object_t;
        v_parameters VARCHAR2(32767) DEFAULT NULL;
        v_result VARCHAR2(32767) DEFAULT NULL;
        v_ler OIISAPIERRORS%rowtype default NULL;
        
    BEGIN
        if 
            nvl(p_txid,' ') != ' ' 
        then      
            v_headers('Accept') := 'application/json';
            v_headers('Content-Type') := 'application/json';
            v_headers('x-access-token') := getApiToken();
            v_parameters := '{"identifiers":"' || p_txid || '"}' ;
            r := jumbo.pkg_oiis_api.apirequest(
                p_method => 'POST', 
                p_url => base_url || '/modules/outputs/sales/financial_collection/pix/integrations/sicredi/delete', 
                p_headers => v_headers,                
                p_parameters => v_parameters
            );
            IF length(nvl(r, '')) = 0 THEN                        
                v_result := 'true';
            else            
                jo := json_object_t.parse(r);
                if jo.get_string('success') = 'true' then
                    v_result := 'true';
                else 
                    v_message := jo.get_string('message');
                    api_error_insert(
                        p_objecttype => 'package',
                        p_objectname => $$plsql_unit,
                        p_line => $$plsql_line,
                        p_msg => v_message,
                        p_vlrs => v_parameters || r
                    );
                end if;
            end if;
        end if;
        RETURN v_result;
    EXCEPTION
        WHEN OTHERS THEN
            api_error_insert(p_line => $$plsql_line);
            v_message := sqlerrm;
            RETURN v_result;
    END;

END pkg_oiis_api;
/
create or replace TRIGGER api_oiis_pcprest_aft_ins_upd AFTER
    update 
        of dtpag,dtbaixa 
    OR INSERT 
        ON jumbo.pcprest
    REFERENCING
        NEW AS new
        Old as old
    FOR EACH ROW
DECLARE
    PRAGMA autonomous_transaction;
    v_result   VARCHAR2(32767) DEFAULT NULL;
    v_message  VARCHAR2(32767) DEFAULT NULL;
    v_ler OIISAPIERRORS%rowtype default NULL;
    v_exists number default 0;
    v_pixcob pcpixcobrancadados%rowtype;
BEGIN

    if INSERTING THEN
        IF
            :new.numtransvenda IS NOT NULL
            AND :new.dtcancel IS NULL
            AND nvl(:new.VALOR, 0) > 0            
            AND :new.CODCOB NOT IN ('DEP','DESD')
            AND :new.CODCOB NOT LIKE '%BNF%'
            AND :new.CODCOB NOT LIKE '%DEV%'
            AND nvl(:new.obs2,' ') != 'Desdobrado via api pix'
            and nvl(:new.rotdesd,0) = 0
            and :new.dtdesd is null
        THEN

            --somente cobranças não boleto
            SELECT 
                COUNT(1) INTO v_exists
            from
                PCCOB
            WHERE   
                CODCOB = NVL(:new.CODCOB,'')
                AND NVL(BOLETO,'N') = 'N'
                AND CODCOB NOT IN ('DEP','DESD')
                AND CODCOB NOT LIKE '%BNF%'
                AND CODCOB NOT LIKE '%DEV%';

            if v_exists > 0 then
                v_result := jumbo.pkg_oiis_api.create_pix_of_trans(:new.codcli,:new.VALOR,:new.numtransvenda,:new.DUPLIC,:new.prest, v_message);
                IF length(nvl(v_result, '')) = 0 THEN
                    jumbo.pkg_oiis_api.api_error_insert(
                        p_objecttype => 'trigger', 
                        p_objectname => 'JUMBO.API_OIIS_PCNFSAID_AFT_INS', 
                        p_line => $$plsql_line, 
                        p_vlrs => :new.numtransvenda || ':' || v_message 
                    ) ;            
                END IF;           
            end if;
        END IF;
    ELSE --UPDATING

        IF
            (:new.numtransvenda IS NOT NULL
            and nvl(:new.valor,0) > 0            
            AND :new.CODCOB NOT IN ('DEP','DESD')
            AND :new.CODCOB NOT LIKE '%BNF%'
            AND :new.CODCOB NOT LIKE '%DEV%'
            and nvl(:new.OBS2,' ') != 'Baixado via api pix'
            and nvl(:new.OBS2,' ') != 'Desdobrado via api pix'
            and (
                (
                    :old.dtpag is null
                    and :new.dtpag is not null
                ) or (
                    :old.dtbaixa is null
                    and :new.dtbaixa is not null
                )
            ))
        THEN
            --somente cobranças não boleto
            SELECT 
                COUNT(1) INTO v_exists
            from
                PCCOB
            WHERE   
                CODCOB = NVL(:new.CODCOB,'')
                AND NVL(BOLETO,'N') = 'N'
                AND CODCOB NOT IN ('DEP','DESD')
                AND CODCOB NOT LIKE '%BNF%'
                AND CODCOB NOT LIKE '%DEV%';

            if v_exists > 0 then
                v_exists := 0;
                SELECT 
                    COUNT(1) INTO v_exists
                from
                    pcpixcobrancadados 
                WHERE   
                    numtransvenda = :new.numtransvenda
                    and nvl(prest,1) = nvl(:new.prest,1)
                    and status = 'ATIVA';

                if v_exists > 0  then
                    SELECT 
                        * INTO v_pixcob
                    from
                        pcpixcobrancadados 
                    WHERE   
                        numtransvenda = :new.numtransvenda
                        and nvl(prest,1) = nvl(:new.prest,1)
                        and status = 'ATIVA';

                    v_result := jumbo.pkg_oiis_api.delete_pix(v_pixcob.NUMTRANSPAGDIGITAL, v_message);

                    IF length(nvl(v_result, '')) = 0 THEN
                        jumbo.pkg_oiis_api.api_error_insert(
                            p_objecttype => 'trigger', 
                            p_objectname => 'JUMBO.api_oiis_pcprest_aft_upd', 
                            p_line => $$plsql_line, 
                            p_vlrs => :new.numtransvenda || ':' || v_message 
                        ) ;            
                    end if;
                end if;
            end if;
        END IF;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        jumbo.pkg_oiis_api.api_error_insert(
            p_objecttype => 'trigger', 
            p_objectname => 'JUMBO.api_oiis_pcprest_aft_upd', 
            p_line => $$plsql_line, 
            p_vlrs => :new.numtransvenda, p_msg => sqlerrm);

        NULL;
END api_oiis_pcprest_aft_ins_upd;
/
create or replace TRIGGER api_oiis_pcpixlog AFTER
    UPDATE OR INSERT OR DELETE
        ON jumbo.pcpixcobrancadados
    REFERENCING
        NEW AS new
        Old as old
    FOR EACH ROW
DECLARE
    pragma autonomous_transaction;
    v_ler OIISAPIERRORS%rowtype default NULL;    
    v_pixlog pcpixlog%rowtype default null;
BEGIN
    v_pixlog.codfilial := nvl(:new.filial,:old.filial);    
    v_pixlog.numtransvenda := nvl(:new.numtransvenda,:old.numtransvenda);    
    v_pixlog.prest := nvl(:new.prest,:old.prest);    
    v_pixlog.DESCRICAO := '{"NUMTRANSPAGDIGITAL":"'||nvl(:new.numtranspagdigital,:old.numtranspagdigital)||'"';    
    if INSERTING THEN
        v_pixlog.operacao := 'INSERT';
    ELSIF UPDATING THEN
        v_pixlog.operacao := 'UPDATE';
        if updating('FILIAL') and nvl(:new.FILIAL,' ') != nvl(:old.FILIAL,' ') then
            v_pixlog.DESCRICAO := v_pixlog.DESCRICAO || ',"FILIAL":"' || NVL(:OLD.FILIAL,'') || '"';     
        END IF;
        if updating('NUMTRANSPAGDIGITAL') and nvl(:new.NUMTRANSPAGDIGITAL,' ') != nvl(:old.NUMTRANSPAGDIGITAL,' ') then
            v_pixlog.DESCRICAO := v_pixlog.DESCRICAO || ',"NUMTRANSPAGDIGITAL":"' || NVL(:OLD.NUMTRANSPAGDIGITAL,'') || '"';     
        END IF;
        if updating('NUMTRANSVENDA') and nvl(:new.NUMTRANSVENDA,' ') != nvl(:old.NUMTRANSVENDA,' ') then
            v_pixlog.DESCRICAO := v_pixlog.DESCRICAO || ',"NUMTRANSVENDA":"' || NVL(:OLD.NUMTRANSVENDA,'') || '"';     
        END IF;
        if updating('PREST') and nvl(:new.PREST,' ') != nvl(:old.PREST,' ') then
            v_pixlog.DESCRICAO := v_pixlog.DESCRICAO || ',"PREST":"' || NVL(:OLD.PREST,'') || '"';     
        END IF;
        if updating('VENCIMENTO') and nvl(:new.VENCIMENTO,' ') != nvl(:old.VENCIMENTO,' ') then
            v_pixlog.DESCRICAO := v_pixlog.DESCRICAO || ',"VENCIMENTO":"' || NVL(:OLD.VENCIMENTO,'') || '"';     
        END IF;
        if updating('STATUS') and nvl(:new.STATUS,' ') != nvl(:old.STATUS,' ') then
            v_pixlog.DESCRICAO := v_pixlog.DESCRICAO || ',"STATUS":"' || NVL(:OLD.STATUS,'') || '"';     
        END IF;        
    ELSIF DELETING THEN
        v_pixlog.operacao := 'DELETE';
    END IF;
    v_pixlog.DESCRICAO := v_pixlog.DESCRICAO || '}';
    v_pixlog.datahora := current_timestamp;
    insert into pcpixlog values v_pixlog;
    commit;
EXCEPTION
    WHEN OTHERS THEN
        jumbo.pkg_oiis_api.api_error_insert(
            p_objecttype => 'trigger', 
            p_objectname => 'JUMBO.api_oiis_pcpixlog', 
            p_line => $$plsql_line, 
            p_vlrs => :new.numtransvenda, 
            p_msg => sqlerrm
        );

        NULL;
END api_oiis_pcpixlog;